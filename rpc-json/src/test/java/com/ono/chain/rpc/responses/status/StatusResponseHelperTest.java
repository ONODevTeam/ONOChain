package com.ono.chain.rpc.responses.status;

import com.ono.chain.rpc.mapper.CouldNotReadJsonException;
import com.ono.chain.rpc.mapper.jackson.SimpleJacksonMapperFactory;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.time.LocalDateTime;

import static org.hamcrest.core.Is.is;

public class StatusResponseHelperTest {
    private static final String STATUS = "{\n"
            + "  \"jsonrpc\": \"2.0\",\n"
            + "  \"id\": \"status.1231312\",\n"
            + "  \"result\": {\n"
            + "    \"node_info\": {\n"
            + "      \"id\": \"14a6dcadc896a08e87ea12ff464711d889d5b77a\",\n"
            + "      \"listen_addr\": \"192.168.55.1:46656\",\n"
            + "      \"network\": \"test-chain-QMHJ4W\",\n"
            + "      \"version\": \"0.20.0-27bd1dea\",\n"
            + "      \"channels\": \"4020212223303800\",\n"
            + "      \"moniker\": \"smueller-m.ponton.local\",\n"
            + "      \"other\": [\n"
            + "        \"amino_version=0.9.9\",\n"
            + "        \"p2p_version=0.5.0\",\n"
            + "        \"consensus_version=v1/0.2.2\",\n"
            + "        \"rpc_version=0.7.0/3\",\n"
            + "        \"tx_index=on\",\n"
            + "        \"rpc_addr=tcp://0.0.0.0:46657\"\n"
            + "      ]\n"
            + "    },\n"
            + "    \"sync_info\": {\n"
            + "      \"latest_block_hash\": \"C2D4FD1908059CCA44866D88B86AE83AD3E011B4\",\n"
            + "      \"latest_app_hash\": \"\",\n"
            + "      \"latest_block_height\": 3,\n"
            + "      \"latest_block_time\": \"2018-06-07T20:05:03.696809427+02:00\",\n"
            + "      \"syncing\": false\n"
            + "    },\n"
            + "    \"validator_info\": {\n"
            + "      \"address\": \"B5A8E53B84C94FB98C94C487FC19B0CC4F490DEA\",\n"
            + "      \"pub_key\": {\n"
            + "        \"type\": \"AC26791624DE60\",\n"
            + "        \"value\": \"xZYfYQGfrDi4dFF1ETY6qRGFfyZ6HUg7OpdRJpS1BAY=\"\n"
            + "      },\n"
            + "      \"voting_power\": 10\n"
            + "    }\n"
            + "  }\n"
            + "}";

    private static final String DUMP_CONSENSUS_STATE = "{\n"
            + "  \"jsonrpc\": \"2.0\",\n"
            + "  \"id\": \"dump_consensus_state\",\n"
            + "  \"result\": {\n"
            + "    \"round_state\": {\n"
            + "      \"height\": 4,\n"
            + "      \"round\": 0,\n"
            + "      \"step\": 2,\n"
            + "      \"start_time\": \"2018-06-07T20:05:05.104747913+02:00\",\n"
            + "      \"commit_time\": \"2018-06-07T20:05:04.104747913+02:00\",\n"
            + "      \"validators\": {\n"
            + "        \"validators\": [\n"
            + "          {\n"
            + "            \"address\": \"377218B1A5419768569B7829CE95C774F125DB35\",\n"
            + "            \"pub_key\": {\n"
            + "              \"type\": \"AC26791624DE60\",\n"
            + "              \"value\": \"8xEJkW3ghtHrLg0JBXvRi4xzUEy4KkuqMGtgODlkE/U=\"\n"
            + "            },\n"
            + "            \"voting_power\": 10,\n"
            + "            \"accum\": 0\n"
            + "          },\n"
            + "          {\n"
            + "            \"address\": \"B5A8E53B84C94FB98C94C487FC19B0CC4F490DEA\",\n"
            + "            \"pub_key\": {\n"
            + "              \"type\": \"AC26791624DE60\",\n"
            + "              \"value\": \"xZYfYQGfrDi4dFF1ETY6qRGFfyZ6HUg7OpdRJpS1BAY=\"\n"
            + "            },\n"
            + "            \"voting_power\": 10,\n"
            + "            \"accum\": 0\n"
            + "          }\n"
            + "        ],\n"
            + "        \"proposer\": {\n"
            + "          \"address\": \"B5A8E53B84C94FB98C94C487FC19B0CC4F490DEA\",\n"
            + "          \"pub_key\": {\n"
            + "            \"type\": \"AC26791624DE60\",\n"
            + "            \"value\": \"xZYfYQGfrDi4dFF1ETY6qRGFfyZ6HUg7OpdRJpS1BAY=\"\n"
            + "          },\n"
            + "          \"voting_power\": 10,\n"
            + "          \"accum\": 0\n"
            + "        }\n"
            + "      },\n"
            + "      \"proposal\": null,\n"
            + "      \"proposal_block\": null,\n"
            + "      \"proposal_block_parts\": null,\n"
            + "      \"locked_round\": 0,\n"
            + "      \"locked_block\": null,\n"
            + "      \"locked_block_parts\": null,\n"
            + "      \"valid_round\": 0,\n"
            + "      \"valid_block\": null,\n"
            + "      \"valid_block_parts\": null,\n"
            + "      \"votes\": [\n"
            + "        {\n"
            + "          \"round\": 0,\n"
            + "          \"prevotes\": [\n"
            + "            \"nil-Vote\",\n"
            + "            \"nil-Vote\"\n"
            + "          ],\n"
            + "          \"prevotes_bit_array\": \"BA{2:__} 0/20 = 0.00\",\n"
            + "          \"precommits\": [\n"
            + "            \"nil-Vote\",\n"
            + "            \"nil-Vote\"\n"
            + "          ],\n"
            + "          \"precommits_bit_array\": \"BA{2:__} 0/20 = 0.00\"\n"
            + "        },\n"
            + "        {\n"
            + "          \"round\": 1,\n"
            + "          \"prevotes\": [\n"
            + "            \"nil-Vote\",\n"
            + "            \"nil-Vote\"\n"
            + "          ],\n"
            + "          \"prevotes_bit_array\": \"BA{2:__} 0/20 = 0.00\",\n"
            + "          \"precommits\": [\n"
            + "            \"nil-Vote\",\n"
            + "            \"nil-Vote\"\n"
            + "          ],\n"
            + "          \"precommits_bit_array\": \"BA{2:__} 0/20 = 0.00\"\n"
            + "        }\n"
            + "      ],\n"
            + "      \"commit_round\": -1,\n"
            + "      \"last_commit\": {\n"
            + "        \"votes\": [\n"
            + "          \"Vote{0:377218B1A541 3/00/2(Precommit) C2D4FD190805 /E36CF9303E82.../ @ 2018-06-07T18:05:04.004Z}\",\n"
            + "          \"Vote{1:B5A8E53B84C9 3/00/2(Precommit) C2D4FD190805 /3C9585AA3EFB.../ @ 2018-06-07T18:05:03.803Z}\"\n"
            + "        ],\n"
            + "        \"votes_bit_array\": \"BA{2:xx} 20/20 = 1.00\",\n"
            + "        \"peer_maj_23s\": {}\n"
            + "      },\n"
            + "      \"last_validators\": {\n"
            + "        \"validators\": [\n"
            + "          {\n"
            + "            \"address\": \"377218B1A5419768569B7829CE95C774F125DB35\",\n"
            + "            \"pub_key\": {\n"
            + "              \"type\": \"AC26791624DE60\",\n"
            + "              \"value\": \"8xEJkW3ghtHrLg0JBXvRi4xzUEy4KkuqMGtgODlkE/U=\"\n"
            + "            },\n"
            + "            \"voting_power\": 10,\n"
            + "            \"accum\": -10\n"
            + "          },\n"
            + "          {\n"
            + "            \"address\": \"B5A8E53B84C94FB98C94C487FC19B0CC4F490DEA\",\n"
            + "            \"pub_key\": {\n"
            + "              \"type\": \"AC26791624DE60\",\n"
            + "              \"value\": \"xZYfYQGfrDi4dFF1ETY6qRGFfyZ6HUg7OpdRJpS1BAY=\"\n"
            + "            },\n"
            + "            \"voting_power\": 10,\n"
            + "            \"accum\": 10\n"
            + "          }\n"
            + "        ],\n"
            + "        \"proposer\": {\n"
            + "          \"address\": \"377218B1A5419768569B7829CE95C774F125DB35\",\n"
            + "          \"pub_key\": {\n"
            + "            \"type\": \"AC26791624DE60\",\n"
            + "            \"value\": \"8xEJkW3ghtHrLg0JBXvRi4xzUEy4KkuqMGtgODlkE/U=\"\n"
            + "          },\n"
            + "          \"voting_power\": 10,\n"
            + "          \"accum\": -10\n"
            + "        }\n"
            + "      }\n"
            + "    },\n"
            + "    \"peers\": [\n"
            + "      {\n"
            + "        \"node_address\": \"b7ea63cf5733de753713fbf310bdbc208be75db9@192.168.55.1:46666\",\n"
            + "        \"peer_state\": {\n"
            + "          \"round_state\": {\n"
            + "            \"height\": 4,\n"
            + "            \"round\": 0,\n"
            + "            \"step\": 1,\n"
            + "            \"start_time\": \"2018-06-07T20:05:04.1040289+02:00\",\n"
            + "            \"proposal\": false,\n"
            + "            \"proposal_block_parts_header\": {\n"
            + "              \"total\": 0,\n"
            + "              \"hash\": \"\"\n"
            + "            },\n"
            + "            \"proposal_block_parts\": null,\n"
            + "            \"proposal_pol_round\": -1,\n"
            + "            \"proposal_pol\": \"__\",\n"
            + "            \"prevotes\": \"__\",\n"
            + "            \"precommits\": \"__\",\n"
            + "            \"last_commit_round\": 0,\n"
            + "            \"last_commit\": \"xx\",\n"
            + "            \"catchup_commit_round\": -1,\n"
            + "            \"catchup_commit\": \"__\"\n"
            + "          },\n"
            + "          \"stats\": {\n"
            + "            \"last_vote_height\": 3,\n"
            + "            \"votes\": 3,\n"
            + "            \"last_block_part_height\": 3,\n"
            + "            \"block_parts\": 2\n"
            + "          }\n"
            + "        }\n"
            + "      }\n"
            + "    ]\n"
            + "  }\n"
            + "}";

    private StatusResponseHelper classUnderTest;

    @Before
    public void setUp() {
        this.classUnderTest = new StatusResponseHelper(new SimpleJacksonMapperFactory().getMapper());
    }

    @Test
    public void testIsStatusResponse() throws CouldNotReadJsonException {
        String dumpConsensus = DUMP_CONSENSUS_STATE;
        Assert.assertFalse(classUnderTest.isStatusResponse(dumpConsensus));

        String statusResponse = STATUS;
        Assert.assertThat("StatusResponseHelper didn't recognize our status response.", classUnderTest.isStatusResponse(statusResponse), is(true));
        Assert.assertThat(classUnderTest.parseLatestBlockHeight(statusResponse), is(3L));
        Assert.assertThat(classUnderTest.parseNodeId(statusResponse), is("14a6dcadc896a08e87ea12ff464711d889d5b77a"));

        Assert.assertThat(classUnderTest.parseLatestBlockTime(statusResponse), is(LocalDateTime.of(2018, 6, 7, 20, 05, 3, 696809427)));
        Assert.assertThat(classUnderTest.parseSyncing(statusResponse), is(false));
    }

}